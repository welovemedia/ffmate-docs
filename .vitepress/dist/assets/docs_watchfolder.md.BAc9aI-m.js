import{_ as a,c as e,o as t,a2 as i}from"./chunks/framework.COcSrLCv.js";const k=JSON.parse('{"title":"Watchfolders","description":"","frontmatter":{},"headers":[],"relativePath":"docs/watchfolder.md","filePath":"docs/watchfolder.md","lastUpdated":1746569539000}'),l={name:"docs/watchfolder.md"};function n(o,s,h,r,d,p){return t(),e("div",null,s[0]||(s[0]=[i(`<h1 id="watchfolders" tabindex="-1">Watchfolders <a class="header-anchor" href="#watchfolders" aria-label="Permalink to &quot;Watchfolders&quot;">​</a></h1><p>FFmate&#39;s <strong>watchfolder</strong> feature allows you to <strong>automatically detect and process new files</strong> in a specified directory. Once a watchfolder is configured, FFmate will <strong>continuously scan</strong> the folder for new or modified files and create <strong>tasks</strong> to process them based on a task preset. The watchfolder feature is useful for automatically transcoding footage from a camera SD card dropped into a network share or creating low-resolution versions of high-resolution files exported from an NLE for review.</p><h2 id="how-watchfolders-work" tabindex="-1">How Watchfolders Work: <a class="header-anchor" href="#how-watchfolders-work" aria-label="Permalink to &quot;How Watchfolders Work:&quot;">​</a></h2><ol><li><strong>Monitor a Folder</strong> – FFmate scans the specified directory at a set interval.</li><li><strong>Detect New Files</strong> – When a new file is detected, FFmate ensures it’s <strong>fully copied</strong> before processing.</li><li><strong>Create Tasks</strong> – FFmate creates a <strong>new FFmate task</strong> for each detected file.</li></ol><h2 id="creating-a-watchfolder" tabindex="-1">Creating a Watchfolder <a class="header-anchor" href="#creating-a-watchfolder" aria-label="Permalink to &quot;Creating a Watchfolder&quot;">​</a></h2><p>To configure a watchfolder, send a <code>POST</code> request to the API:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -X</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> POST</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http://localhost:3000/api/v1/watchfolders</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     -H</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Content-Type: application/json&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       &quot;name&quot;: &quot;Camera Card Watch&quot;,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       &quot;description&quot;: &quot;Automatically processes camera footage&quot;,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       &quot;interval&quot;: 10,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       &quot;growthChecks&quot;: 3,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       &quot;preset&quot;: &quot;cabfad2c-70d1-4df6-9267-f549a376301f&quot;,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       &quot;path&quot;: &quot;/volumes/media/camera_cards&quot;,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       &quot;filter&quot;: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">         &quot;extensions&quot;: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">           &quot;include&quot;: [&quot;mp4&quot;, &quot;mov&quot;],</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">           &quot;exclude&quot;: [&quot;tmp&quot;, &quot;log&quot;]</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">         }</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       }</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     }&#39;</span></span></code></pre></div><h2 id="watchfolder-properties" tabindex="-1">Watchfolder Properties: <a class="header-anchor" href="#watchfolder-properties" aria-label="Permalink to &quot;Watchfolder Properties:&quot;">​</a></h2><ul><li><strong><code>name</code></strong> – A unique name for the watchfolder.</li><li><strong><code>description</code></strong> – Optional description of what this watchfolder does.</li><li><strong><code>interval</code></strong> – How often (in seconds) FFmate scans the folder for new files.</li><li><strong><code>growthChecks</code></strong> – The number of checks FFmate performs to ensure a file is fully copied before processing.</li><li><strong><code>preset</code></strong> – The ID of a predefined transcoding <strong>preset</strong> that will be applied to detected files.</li><li><strong><code>path</code></strong> – The <strong>absolute path</strong> of the directory to monitor.</li><li><strong><code>filter</code></strong> – Rules for file selection: <ul><li><strong><code>include</code></strong> – Only process files with these extensions (e.g., <code>mp4</code>, <code>mov</code>).</li><li><strong><code>exclude</code></strong> – Ignore files with these extensions (e.g., <code>tmp</code>, <code>log</code>).</li></ul></li></ul><h2 id="how-file-detection-works" tabindex="-1">How File Detection Works: <a class="header-anchor" href="#how-file-detection-works" aria-label="Permalink to &quot;How File Detection Works:&quot;">​</a></h2><p>FFmate ensures that only <strong>fully copied</strong> files are processed by using a <strong>growth check validation</strong>:</p><ol><li>A file is detected in the watchfolder.</li><li>FFmate checks its <strong>size</strong>.</li><li>If the size remains the same after multiple scans (determined by <code>growthChecks</code>), the file is processed.</li><li>If the file is <strong>still growing</strong>, FFmate waits and continues checking until it stops changing.</li></ol><p>This prevents <strong>incomplete</strong> files from being prematurely processed.</p><h2 id="deleting-a-watchfolder" tabindex="-1">Deleting a Watchfolder <a class="header-anchor" href="#deleting-a-watchfolder" aria-label="Permalink to &quot;Deleting a Watchfolder&quot;">​</a></h2><p>To remove a watchfolder, send a <code>DELETE</code> request:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -X</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> DELETE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http://localhost:3000/api/v1/watchfolders/{watchfolderId}</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     -H</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;accept: application/json&quot;</span></span></code></pre></div><h3 id="list-all-watchfolders" tabindex="-1">List All Watchfolders <a class="header-anchor" href="#list-all-watchfolders" aria-label="Permalink to &quot;List All Watchfolders&quot;">​</a></h3><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -X</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> GET</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http://localhost:3000/api/v1/watchfolders</span></span></code></pre></div><h3 id="get-watchfolder-details" tabindex="-1">Get Watchfolder Details <a class="header-anchor" href="#get-watchfolder-details" aria-label="Permalink to &quot;Get Watchfolder Details&quot;">​</a></h3><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -X</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> GET</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http://localhost:3000/api/v1/watchfolders/{watchfolderId}</span></span></code></pre></div><h3 id="update-a-watchfolder" tabindex="-1">Update a Watchfolder <a class="header-anchor" href="#update-a-watchfolder" aria-label="Permalink to &quot;Update a Watchfolder&quot;">​</a></h3><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -X</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> PATCH</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http://localhost:3000/api/v1/watchfolders/{watchfolderId}</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     -H</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Content-Type: application/json&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       &quot;interval&quot;: 15,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       &quot;filter&quot;: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">         &quot;include&quot;: [&quot;mp4&quot;, &quot;avi&quot;]</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       }</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     }&#39;</span></span></code></pre></div>`,22)]))}const g=a(l,[["render",n]]);export{k as __pageData,g as default};
