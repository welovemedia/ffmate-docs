import{_ as n,C as l,c as o,o as i,a2 as a,b as h,w as t,a as p,G as r,a3 as k}from"./chunks/framework.COcSrLCv.js";const f=JSON.parse('{"title":"Understanding Tasks in FFmate","description":"","frontmatter":{},"headers":[],"relativePath":"docs/tasks.md","filePath":"docs/tasks.md","lastUpdated":1746569539000}'),d={name:"docs/tasks.md"};function c(u,s,g,E,F,y){const e=l("Mermaid");return i(),o("div",null,[s[1]||(s[1]=a('<h1 id="understanding-tasks-in-ffmate" tabindex="-1">Understanding Tasks in FFmate <a class="header-anchor" href="#understanding-tasks-in-ffmate" aria-label="Permalink to &quot;Understanding Tasks in FFmate&quot;">​</a></h1><p>In FFmate, a <strong>task</strong> is an individual FFmpeg job, whether it&#39;s transcoding, extracting audio, or applying filters. Tasks can be submitted <strong>individually</strong> or as part of a <strong>batch</strong>, allowing multiple files to be processed efficiently in a single request. Every task follows a structured <strong>lifecycle</strong>, progressing from submission to execution and ultimately reaching completion or failure.</p><p>Before diving into task execution, let&#39;s first go through the <strong>lifecycle</strong> of tasks and their corresponding <strong>statuses</strong> in FFmate.</p><table tabindex="0"><thead><tr><th>Status</th><th>Description</th></tr></thead><tbody><tr><td><code>queued</code></td><td>The task is waiting to be processed.</td></tr><tr><td><code>processing</code></td><td>The task is currently being executed by FFmpeg.</td></tr><tr><td><code>completed</code></td><td>The task has finished successfully.</td></tr><tr><td><code>failed</code></td><td>The task encountered an error during execution.</td></tr><tr><td><code>canceled</code></td><td>The task was manually canceled before completion.</td></tr></tbody></table><h3 id="task-flow" tabindex="-1">Task Flow: <a class="header-anchor" href="#task-flow" aria-label="Permalink to &quot;Task Flow:&quot;">​</a></h3><p>The diagram below shows how a task progresses through its lifecycle in FFmate</p>',6)),(i(),h(k,null,{default:t(()=>[r(e,{id:"mermaid-69",class:"mermaid",graph:"graph%20TD%3B%0A%20%20%20%20queued%20--%3E%7CStarts%20processing%7C%20processing%3B%0A%20%20%20%20processing%20--%3E%7CFinishes%20successfully%7C%20completed%3B%0A%20%20%20%20processing%20--%3E%7CFails%7C%20failed%3B%0A%20%20%20%20queued%20--%3E%7CCanceled%7C%20canceled%3B%0A"})]),fallback:t(()=>s[0]||(s[0]=[p(" Loading... ")])),_:1})),s[2]||(s[2]=a(`<p>Next, let&#39;s explore how to trigger and manage single tasks in FFmate</p><h2 id="creating-a-task" tabindex="-1">Creating a Task <a class="header-anchor" href="#creating-a-task" aria-label="Permalink to &quot;Creating a Task&quot;">​</a></h2><p>To create a task, send a <code>POST</code> request to the FFmate API:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -X</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> POST</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http://localhost:3000/api/v1/tasks</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     -H</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Content-Type: application/json&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       &quot;command&quot;: &quot;-y -i \${INPUT_FILE} -c:v libx264 -preset fast -crf 23 \${OUTPUT_FILE}&quot;,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       &quot;inputFile&quot;: &quot;videos/input.mp4&quot;,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       &quot;outputFile&quot;: &quot;videos/output.mp4&quot;,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       &quot;priority&quot;: 2</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     }&#39;</span></span></code></pre></div><h3 id="task-properties" tabindex="-1">Task Properties <a class="header-anchor" href="#task-properties" aria-label="Permalink to &quot;Task Properties&quot;">​</a></h3><ul><li><strong><code>command</code></strong> <em>[mandatory]</em></li></ul><p>Defines the FFmpeg command to execute. FFmate <strong>implicitly calls the FFmpeg binary</strong>, so you only need to specify the <strong>command-line parameters and flags</strong>, without including <code>ffmpeg</code> itself.</p><ul><li><p><strong><code>inputFile</code></strong> <em>[optional]</em> – The path to the input media file that will be processed..</p></li><li><p><strong><code>outputFile</code></strong> <em>[optional]</em> – The path where the transcoded file should be saved.</p></li></ul><div class="tip custom-block"><p class="custom-block-title">Handling Input and Output Files</p><ul><li>The <strong><code>inputFile</code></strong> and <strong><code>outputFile</code></strong> properties are <strong>optional</strong> and should only be used if your command includes the placeholders <code>\${INPUT_FILE}</code> and <code>\${OUTPUT_FILE}</code>.</li><li>FFmate <strong>automatically replaces</strong> these placeholders with the actual file paths during execution.</li><li>If your command <strong>directly specifies input and output paths</strong>, you do <strong>not</strong> need to provide these properties separately.</li></ul></div><ul><li><strong><code>priority</code></strong> <em>[mandatory]</em> – Determines the execution order: <ul><li><code>1</code> → Low priority</li><li><code>2</code> → Normal priority (default)</li><li><code>3</code> → High priority</li><li><code>4</code> → Critical priority (executed first)</li></ul></li></ul><p>After submitting a task, FFmate will respond with a JSON object containing the <code>taskId</code>. This <code>taskId</code> can be used to monitor the task’s progress in the next section.</p><h2 id="monitoring-a-task" tabindex="-1">Monitoring a Task <a class="header-anchor" href="#monitoring-a-task" aria-label="Permalink to &quot;Monitoring a Task&quot;">​</a></h2><p>Once submitted, you can check a task’s status by making a <code>GET</code> request:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -X</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;GET&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;http://localhost:3000/api/v1/tasks/{taskId}&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -H</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;accept: application/json&#39;</span></span></code></pre></div><p>Replace <code>{taskId}</code> with the actual task ID from the submission response.</p><h2 id="monitoring-all-tasks" tabindex="-1">Monitoring All Tasks <a class="header-anchor" href="#monitoring-all-tasks" aria-label="Permalink to &quot;Monitoring All Tasks&quot;">​</a></h2><p>FFmate allows you to retrieve a list of all tasks, regardless of their current state—whether they are waiting in the queue, actively processing, successfully completed, or encountered an error.</p><p>To retrieve a list of all tasks, send a GET request to the API:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -X</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;GET&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;http://localhost:3000/api/v1/tasks?page=0&amp;perPage=100&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -H</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;accept: application/json&#39;</span></span></code></pre></div><p><strong>Query Parameters:</strong></p><ul><li><strong><code>page</code></strong> <em>[optional]</em> – Specifies which page of results to retrieve. Default: <code>0</code>.</li><li><strong><code>perPage</code></strong> <em>[optional]</em> – Defines how many tasks should be included in each page. Default: <code>100</code>.</li></ul><h2 id="canceling-a-task" tabindex="-1">Canceling a Task <a class="header-anchor" href="#canceling-a-task" aria-label="Permalink to &quot;Canceling a Task&quot;">​</a></h2><p>FFmate allows you to cancel a task that is currently <strong>queued</strong> or <strong>processing</strong>. Once canceled, the task will not be executed or will be stopped if already in progress.</p><p>To cancel a task, make a <code>PATCH</code> request:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -X</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;PATCH&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;http://localhost:3000/api/v1/tasks/{taskId}/cancel&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -H</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;accept: application/json&#39;</span></span></code></pre></div><p><strong>Query Parameters:</strong></p><ul><li><strong><code>{taskId}</code></strong> <em>[mandatory]</em> – Specifies unique ID of the task you want to cancel.</li></ul><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p>If the task is already processing, FFmate will attempt to <strong>stop</strong> it, but cancellation may not always be immediate.</p></div><h2 id="restarting-a-task" tabindex="-1">Restarting a Task <a class="header-anchor" href="#restarting-a-task" aria-label="Permalink to &quot;Restarting a Task&quot;">​</a></h2><p>If a task has failed or been canceled, FFmate allows you to restart it without needing to resubmit the job manually.</p><p>To restart a task, send a <code>PATCH</code> request:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -X</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;PATCH&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;http://localhost:3000/api/v1/tasks/{taskId}/restart&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -H</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;accept: application/json&#39;</span></span></code></pre></div><p><strong>Query Parameters:</strong></p><ul><li><strong><code>{taskId}</code></strong> <em>[mandatory]</em> – The unique identifier of the task to restart.</li></ul><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><ul><li>Restarting a task will <strong>re-run the exact same command</strong> using the original input and output paths.</li><li>If the task was previously processing, it will start from the beginning.</li></ul></div><p>Once restarted, the task will move back into the <strong>queued</strong> state and follow the standard task lifecycle.</p><h2 id="deleting-a-task" tabindex="-1">Deleting a Task <a class="header-anchor" href="#deleting-a-task" aria-label="Permalink to &quot;Deleting a Task&quot;">​</a></h2><p>Once a task is completed, canceled, or no longer needed, you can <strong>permanently remove</strong> it from FFmate.</p><p>To delete a task, make a <code>DELETE</code> request:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -X</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;DELETE&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;http://localhost:3000/api/v1/tasks/{taskId}&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -H</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;accept: application/json&#39;</span></span></code></pre></div><p><strong>Query Parameters:</strong></p><ul><li><strong><code>{taskId}</code></strong> <em>(mandatory)</em> – The unique ID of the task to be deleted.</li></ul><div class="warning custom-block"><p class="custom-block-title">Important</p><ul><li>Deleting a task <strong>removes the database entry</strong> from FFmate but <strong>does not</strong> delete the input or output files.</li><li>If the task is still processing, FFmate will attempt to <strong>stop</strong> it before deletion.</li></ul></div><p>Okay, let&#39;s document how Batch Operations work in <code>ffmate</code>.</p><h2 id="batch-operations-processing-multiple-tasks-efficiently" tabindex="-1">Batch Operations: Processing Multiple Tasks Efficiently <a class="header-anchor" href="#batch-operations-processing-multiple-tasks-efficiently" aria-label="Permalink to &quot;Batch Operations: Processing Multiple Tasks Efficiently&quot;">​</a></h2><p><code>ffmate</code> allows you to submit multiple transcoding tasks in a single request, known as a &quot;batch.&quot; This is particularly useful when you have a collection of files to process with similar (or different) settings, as it streamlines the submission process and helps <code>ffmate</code> manage them as a related group.</p><h3 id="what-is-a-batch" tabindex="-1">What is a Batch? <a class="header-anchor" href="#what-is-a-batch" aria-label="Permalink to &quot;What is a Batch?&quot;">​</a></h3><p>When you submit multiple task definitions in one API call, <code>ffmate</code> assigns a unique <strong>Batch ID</strong> (a UUID) to all tasks created from that submission. This Batch ID serves as a common identifier for the group.</p><ul><li><strong>Individual Tasks:</strong> Each item in your batch request still becomes an individual task within <code>ffmate</code>. This means each task will: <ul><li>Go through its own lifecycle (Queued, Pre-Processing, Running, Post-Processing, Done).</li><li>Be processed independently by <code>ffmpeg</code> according to its specific settings (or preset).</li><li>Have its own progress, status, and potential errors.</li></ul></li><li><strong>No Inter-Task Dependency (by default):</strong> <code>ffmate</code> processes tasks in a batch concurrently (up to the <code>max-concurrent-tasks</code> limit) or sequentially based on their priority and queue order. The success or failure of one task in a batch does not inherently affect other tasks <em>within the same batch</em> unless you implement such logic in your pre/post-processing scripts.</li></ul><h3 id="how-to-submit-a-batch-of-tasks" tabindex="-1">How to Submit a Batch of Tasks <a class="header-anchor" href="#how-to-submit-a-batch-of-tasks" aria-label="Permalink to &quot;How to Submit a Batch of Tasks&quot;">​</a></h3><p>You submit a batch of tasks using the REST API by sending a <code>POST</code> request to the <code>/api/v1/tasks/batch</code> endpoint. The request body should be a JSON array, where each element in the array is a standard <code>NewTask</code> object (the same object you&#39;d use for creating a single task via <code>/api/v1/tasks</code>).</p><p><strong>API Endpoint:</strong> <code>POST /api/v1/tasks/batch</code></p><p><strong>Request Body:</strong> An array of <code>NewTask</code> objects.</p><p><strong>Example: Submitting a Batch of Two Tasks</strong></p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// POST /api/v1/tasks/batch</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Convert Episode 1 to WebM&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;inputFile&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/mnt/source_videos/seriesA/episode_01.mov&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;preset&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;uuid-of-webm-720p-preset&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Reference a preset</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;priority&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Convert Episode 2 to WebM&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;inputFile&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/mnt/source_videos/seriesA/episode_02.mov&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;preset&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;uuid-of-webm-720p-preset&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;priority&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Extract Thumbnail for Promo Image&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;command&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ffmpeg -ss 00:01:30 -i \${INPUT_FILE} -frames:v 1 -q:v 2 \${OUTPUT_FILE}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;inputFile&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/mnt/source_videos/seriesA/promo_material.mp4&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;outputFile&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/mnt/output_images/promo_thumbnail_\${TIMESTAMP_SECONDS}.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;priority&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><p><strong>Response:</strong></p><p>Upon successful submission, <code>ffmate</code> will respond with a JSON array containing the full <code>Task</code> objects for each task created in the batch. Each of these task objects will include the same <code>batch</code> ID.</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 200 OK</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;uuid&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;task-uuid-1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;batch&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;batch-uuid-for-this-submission&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Same for all tasks in this batch</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Convert Episode 1 to WebM&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;status&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;QUEUED&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ... other task details</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;uuid&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;task-uuid-2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;batch&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;batch-uuid-for-this-submission&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Same for all tasks in this batch</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Convert Episode 2 to WebM&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;status&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;QUEUED&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ... other task details</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;uuid&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;task-uuid-3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;batch&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;batch-uuid-for-this-submission&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Same for all tasks in this batch</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Extract Thumbnail for Promo Image&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;status&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;QUEUED&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ... other task details</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><h3 id="managing-and-monitoring-batches" tabindex="-1">Managing and Monitoring Batches <a class="header-anchor" href="#managing-and-monitoring-batches" aria-label="Permalink to &quot;Managing and Monitoring Batches&quot;">​</a></h3><p>While <code>ffmate</code> treats each task in a batch individually for processing, the Batch ID allows you to group and monitor them:</p><ol><li><p><strong>Listing Tasks by Batch ID:</strong></p><ul><li>You can retrieve all tasks belonging to a specific batch using the API: <code>GET /api/v1/tasks/batch/{batch_uuid}</code></li><li>This is useful for checking the overall progress of a submitted batch.</li></ul></li><li><p><strong>Webhooks:</strong></p><ul><li><strong><code>batch.created</code></strong>: This webhook event (if configured) fires once when a batch of tasks is successfully submitted. The payload will typically be an array of the created task DTOs.</li><li><strong><code>batch.finished</code></strong>: This webhook event fires when <em>all</em> tasks belonging to a specific Batch ID have reached a terminal state (e.g., <code>DONE_SUCCESSFUL</code>, <code>DONE_ERROR</code>, <code>DONE_CANCELED</code>). <ul><li>The payload for this webhook would likely provide a summary or list of the final states of all tasks in that batch. This is ideal for triggering follow-up actions once an entire set of related jobs is complete.</li></ul></li></ul></li></ol><h3 id="use-cases-for-batch-operations" tabindex="-1">Use Cases for Batch Operations <a class="header-anchor" href="#use-cases-for-batch-operations" aria-label="Permalink to &quot;Use Cases for Batch Operations&quot;">​</a></h3><ul><li><strong>Bulk Transcoding:</strong> Processing an entire folder of videos to a new format or resolution.</li><li><strong>Multi-Rendition Generation:</strong> Creating multiple versions (e.g., different bitrates, resolutions) of the same source file. Each rendition would be a separate task in the batch.</li><li><strong>Sequential Asset Processing:</strong> Submitting tasks for different stages of a media workflow (e.g., Task 1: Clean audio, Task 2: Transcode video, Task 3: Watermark) for a set of source files. While <code>ffmate</code> processes them based on queue rules, you can monitor them as a batch.</li><li><strong>Simplifying Client Submissions:</strong> Clients interacting with your <code>ffmate</code> instance can submit multiple related jobs in a single API call, reducing network overhead and simplifying their logic.</li></ul><h3 id="considerations" tabindex="-1">Considerations <a class="header-anchor" href="#considerations" aria-label="Permalink to &quot;Considerations&quot;">​</a></h3><ul><li><strong>Error Handling:</strong> If the overall batch submission request is malformed (e.g., invalid JSON), the entire request will fail. However, if the JSON array is valid but one of the individual <code>NewTask</code> objects within it is invalid (e.g., missing a required field if not using a preset), <code>ffmate</code> <em>may</em> reject the entire batch or process the valid tasks and report errors for the invalid ones. Check the API response and <code>ffmate</code> logs for specific behavior.</li><li><strong>Resource Management:</strong> Submitting very large batches can quickly fill up the task queue. <code>ffmate</code>&#39;s <code>max-concurrent-tasks</code> setting will prevent system overload, but tasks will remain queued, potentially for a long time. Plan your batch sizes accordingly.</li></ul><p>Batch operations in <code>ffmate</code> provide a convenient way to manage groups of related transcoding jobs, improving workflow efficiency and enabling more complex automation scenarios, especially when combined with webhooks like <code>batch.finished</code>.</p>`,66))])}const b=n(d,[["render",c]]);export{f as __pageData,b as default};
