import{_ as e,c as t,o as a,ae as i}from"./chunks/framework.CTVYQtO4.js";const k=JSON.parse('{"title":"üöÄ Getting Started","description":"","frontmatter":{},"headers":[],"relativePath":"docs/getting-started.md","filePath":"docs/getting-started.md"}'),o={name:"docs/getting-started.md"};function n(l,s,r,h,p,d){return a(),t("div",null,s[0]||(s[0]=[i(`<h1 id="üöÄ-getting-started" tabindex="-1">üöÄ Getting Started <a class="header-anchor" href="#üöÄ-getting-started" aria-label="Permalink to &quot;üöÄ Getting Started&quot;">‚Äã</a></h1><p>Setting up FFmate is quick and straightforward. Follow these steps to get up and running in no time.</p><h2 id="üì¶-download-ffmate" tabindex="-1">üì¶ Download FFmate <a class="header-anchor" href="#üì¶-download-ffmate" aria-label="Permalink to &quot;üì¶ Download FFmate&quot;">‚Äã</a></h2><p>Get the latest release of FFmate from <a href="https://github.com/welovemedia/ffmate/releases" target="_blank" rel="noreferrer">GitHub</a>..</p><h2 id="üèÅ-running-ffmate" tabindex="-1">üèÅ Running FFmate <a class="header-anchor" href="#üèÅ-running-ffmate" aria-label="Permalink to &quot;üèÅ Running FFmate&quot;">‚Äã</a></h2><p>Once installed, start the FFmate server from the command line:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ffmate</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> server</span></span></code></pre></div><p>By default, the server runs on <strong><a href="http://localhost:3000" target="_blank" rel="noreferrer">http://localhost:3000</a></strong>. Is port 3000 unavailable, or do you want to start FFmate on a different port? Learn how to change the port here üëâ <a href="#port-configuration">Learn more</a>.</p><hr><h2 id="üéØ-submitting-your-first-task" tabindex="-1">üéØ Submitting your first task <a class="header-anchor" href="#üéØ-submitting-your-first-task" aria-label="Permalink to &quot;üéØ Submitting your first task&quot;">‚Äã</a></h2><p>To submit a new transcoding task, make a <code>POST</code> request to the API:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -X</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> POST</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http://localhost:3000/api/v1/tasks</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     -H</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Content-Type: application/json&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       &quot;command&quot;: &quot;-y -i \${INPUT_FILE} -c:v libx264 -preset fast -crf 23 \${OUTPUT_FILE}&quot;,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       &quot;inputFile&quot;: &quot;videos/input.mp4&quot;,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       &quot;outputFile&quot;: &quot;videos/output.mp4&quot;,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       &quot;priority&quot;: 2</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     }&#39;</span></span></code></pre></div><h3 id="üìå-task-properties" tabindex="-1">üìå Task Properties: <a class="header-anchor" href="#üìå-task-properties" aria-label="Permalink to &quot;üìå Task Properties:&quot;">‚Äã</a></h3><p>Each property in the request body has a specific role:</p><h2 id="task-submission-parameters" tabindex="-1">Task Submission Parameters <a class="header-anchor" href="#task-submission-parameters" aria-label="Permalink to &quot;Task Submission Parameters&quot;">‚Äã</a></h2><h2 id="task-submission-parameters-1" tabindex="-1">Task Submission Parameters <a class="header-anchor" href="#task-submission-parameters-1" aria-label="Permalink to &quot;Task Submission Parameters&quot;">‚Äã</a></h2><h3 id="command" tabindex="-1"><code>command</code> <a class="header-anchor" href="#command" aria-label="Permalink to &quot;\`command\`&quot;">‚Äã</a></h3><p>This represents the FFmpeg command that will be executed. FFmate implicitly calls the FFmpeg binary, so you only need to specify the command-line parameters and flags without including the FFmpeg executable itself. Use <code>\${INPUT_FILE}</code> and <code>\${OUTPUT_FILE}</code> as placeholders for the actual input and output file paths.</p><div class="tip custom-block" style="padding-top:8px;"> ‚Ä¢ <code>\${INPUT_FILE}</code> will be replaced by the full path of the input file.<br> ‚Ä¢ <code>\${OUTPUT_FILE}</code> will be replaced by the full path of the output file. </div><ul><li><strong><code>inputFile</code></strong>: Path to the input media file that will be processed.</li><li><strong><code>inputFile</code></strong>: Path where the transcoded file should be saved.</li><li><strong><code>priority</code></strong>: Determines the processing order of the task. Higher values are processed first (e.g., <code>1</code> for low priority, <code>4</code> for critical priority).</li></ul><p>After submitting a task, FFmate will respond with a JSON object containing the <code>taskId</code>. This <code>taskId</code> can be used to monitor the task‚Äôs progress in the next section.</p><h3 id="üîç-monitoring-the-task" tabindex="-1">üîç Monitoring the Task <a class="header-anchor" href="#üîç-monitoring-the-task" aria-label="Permalink to &quot;üîç Monitoring the Task&quot;">‚Äã</a></h3><p>Check the status of your task by making a <code>GET</code> request:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http://localhost:3000/api/v1/tasks/{taskId}</span></span></code></pre></div><p>Replace <code>{taskId}</code> with the actual ID returned when submitting the task.</p><p>You can track your FFmate tasks directly in the Web UI. üëâ <a href="#web-ui-monitoring">Learn more</a></p><hr><h2 id="‚ö°-watchfolders" tabindex="-1">‚ö° Watchfolders <a class="header-anchor" href="#‚ö°-watchfolders" aria-label="Permalink to &quot;‚ö° Watchfolders&quot;">‚Äã</a></h2><p>FFmate can automatically detect and process new files in a <strong>watchfolder</strong>.</p><p>To configure a watchfolder, make a <code>POST</code> request to the API:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -X</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> POST</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http://localhost:3000/api/v1/watchfolders</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     -H</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Content-Type: application/json&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       &quot;name&quot;: &quot;My Watchfolder&quot;,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       &quot;description&quot;: &quot;Automatically processes new media files&quot;,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       &quot;interval&quot;: 5,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       &quot;growthChecks&quot;: 3,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       &quot;preset&quot;: &quot;preset-id&quot;,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       &quot;path&quot;: &quot;/path/to/watchfolder&quot;,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       &quot;filter&quot;: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">         &quot;extensions&quot;: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">           &quot;include&quot;: [&quot;mp4&quot;, &quot;mov&quot;],</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">           &quot;exclude&quot;: [&quot;tmp&quot;, &quot;log&quot;]</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">         }</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       }</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     }&#39;</span></span></code></pre></div><h3 id="üìå-watchfolder-properties" tabindex="-1">üìå¬†Watchfolder properties: <a class="header-anchor" href="#üìå-watchfolder-properties" aria-label="Permalink to &quot;üìå¬†Watchfolder properties:&quot;">‚Äã</a></h3><ul><li><strong><code>name</code></strong>: A unique name for the watchfolder.</li><li><strong><code>description</code></strong>: A brief description of its purpose.</li><li><strong><code>interval</code></strong>: Time (in seconds) between folder scans.</li><li><strong><code>growthChecks</code></strong>: Number of times a file is checked to ensure it&#39;s fully copied before processing.</li><li><strong><code>preset</code></strong>: The ID of a predefined transcoding preset to apply.</li><li><strong><code>path</code></strong>: The absolute path of the folder to monitor.</li><li><strong><code>filter</code></strong>: Rules for file selection. <ul><li><strong><code>include</code></strong>: List of file extensions to process (e.g., <code>mp4</code>, <code>mov</code>).</li><li><strong><code>exclude</code></strong>: List of file extensions to ignore (e.g., <code>tmp</code>, <code>log</code>).</li></ul></li></ul><p>Once configured, any new file matching the criteria will be automatically processed when added to the watchfolder.</p><p>üåê Are you more in the mood to configure your watchfolder in a more visual way? No problem! Learn how to configure your first watchfolder using our Web UI üëâ <a href="#web-ui">Check it out</a></p><hr><h2 id="üîó-real-time-updates-with-webhook-notifications" tabindex="-1">üîó Real-Time updates with Webhook notifications <a class="header-anchor" href="#üîó-real-time-updates-with-webhook-notifications" aria-label="Permalink to &quot;üîó Real-Time updates with Webhook notifications&quot;">‚Äã</a></h2><p>FFmate can notify external systems about job progress, completion, or failures via <strong>webhooks</strong>.</p><p>To configure a webhook, make a <code>POST</code> request to the API:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --location</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;http://localhost:3000/api/v1/webhooks&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--header </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Content-Type: application/json&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--data </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;{ &quot;event&quot;: &quot;task.created&quot;, &quot;url&quot;: &quot;https://sev.requestcatcher.com/ffmate/webhook.create&quot; }&#39;</span></span></code></pre></div><p>FFmate will send a <code>POST</code> request to the specified URL when the event occurs.</p>`,41)]))}const u=e(o,[["render",n]]);export{k as __pageData,u as default};
