import{_ as o,c as t,o as s,a2 as a}from"./chunks/framework.COcSrLCv.js";const p=JSON.parse('{"title":"Debugging","description":"","frontmatter":{},"headers":[],"relativePath":"docs/debugging.md","filePath":"docs/debugging.md","lastUpdated":1746569539000}'),n={name:"docs/debugging.md"};function i(r,e,l,c,d,g){return s(),t("div",null,e[0]||(e[0]=[a('<h1 id="debugging" tabindex="-1">Debugging <a class="header-anchor" href="#debugging" aria-label="Permalink to &quot;Debugging&quot;">​</a></h1><p><code>FFmate</code> offers powerful, fine-grained debugging options that allow you to capture detailed debug information from specific internal components, making it easier to trace issues and understand what’s happening under the hood.</p><h3 id="enabling-debug-mode" tabindex="-1">Enabling Debug Mode <a class="header-anchor" href="#enabling-debug-mode" aria-label="Permalink to &quot;Enabling Debug Mode&quot;">​</a></h3><p>You can enable debug logging in two primary ways:</p><ol><li><p><strong>Using the Command-Line Flag:</strong></p><ul><li>The most common way is to use the global <code>-d</code> or <code>--debug</code> flag when running any <code>ffmate</code> command (especially <code>ffmate server</code>).</li><li><strong>Syntax:</strong> <code>ffmate &lt;command&gt; --debug=&quot;&lt;namespaces&gt;&quot;</code></li><li><strong>Example:</strong> <code>ffmate server --debug=&quot;*&quot;</code></li></ul></li><li><p><strong>Using OS Environment Variable:</strong></p><ul><li>You can set the environment variable before running <code>FFmate</code>.</li><li><strong>Syntax (Linux/macOS):</strong> <code>DEBUGO=&quot;&lt;namespaces&gt;&quot; ffmate server</code></li><li><strong>Syntax (Windows PowerShell):</strong> <code>$env:DEBUGO=&quot;&lt;namespaces&gt;&quot;; ffmate server</code></li><li>If both the flag and the environment variable are set, the command-line flag will take precedence.</li></ul></li></ol><h3 id="understanding-namespaces" tabindex="-1">Understanding Namespaces <a class="header-anchor" href="#understanding-namespaces" aria-label="Permalink to &quot;Understanding Namespaces&quot;">​</a></h3><p>The core of <code>FFmate</code>&#39;s debugging system is <strong>namespaces</strong>. When you enable debugging, you specify which namespaces you&#39;re interested in.</p><ul><li><strong>Wildcards:</strong><ul><li><code>*</code>: The asterisk acts as a wildcard, matching any sequence of characters. <ul><li><code>--debug=&quot;*&quot;</code>: Enables <strong>all</strong> debug messages from every component. This is very verbose but useful for a general overview.</li><li><code>--debug=&quot;sev:*&quot;</code>: Enables all debug messages from components within the <code>sev</code> namespace (the internal framework).</li><li><code>--debug=&quot;*ffmpeg*&quot;</code>: Enables debug messages from any namespace containing &quot;ffmpeg&quot;.</li></ul></li></ul></li><li><strong>Exclusion:</strong><ul><li><code>-</code>: Prefixing a namespace with a hyphen excludes it.</li><li><code>--debug=&quot;*,-gin&quot;</code>: Enables all debug messages <em>except</em> those from the <code>gin</code> namespace.</li><li><code>--debug=&quot;sev:*,-sev:metrics&quot;</code>: Enables all <code>sev</code> messages except those specifically from <code>sev:metrics</code>.</li></ul></li><li><strong>Multiple Namespaces:</strong><ul><li>You can specify multiple namespaces by separating them with commas.</li><li><code>--debug=&quot;queue,ffmpeg,watchfolder&quot;</code>: Enables debug messages only from the <code>queue</code>, <code>ffmpeg</code>, and <code>watchfolder</code> components.</li></ul></li></ul><h3 id="debug-namespaces-in-ffmate" tabindex="-1">Debug Namespaces in FFmate <a class="header-anchor" href="#debug-namespaces-in-ffmate" aria-label="Permalink to &quot;Debug Namespaces in FFmate&quot;">​</a></h3><p>Below are some of the key namespaces used for debugging. They help generate detailed log output from specific components within <code>FFmate</code>:</p><ul><li><p><strong><code>*</code> (Global Wildcard):</strong></p><ul><li><strong>What to expect:</strong> Extremely verbose output covering every debug message from all parts of <code>ffmate</code>, including internal framework (<code>sev</code>) operations, Gin request handling, database interactions (if enabled at that level), queue processing, webhook firing, etc.</li><li><strong>Use when:</strong> You&#39;re unsure where a problem lies and need a broad overview, or when tracing a complex interaction across multiple components. Be prepared for a lot of output.</li></ul></li><li><p><strong><code>gin</code>:</strong></p><ul><li><strong>What to expect:</strong> Logs related to the Gin web framework, such as incoming HTTP requests, route matching, and middleware execution. Useful for debugging API call issues.</li><li><strong>Example Log:</strong> <code>gin [GIN] 2025/02/14 - 10:00:00 | 200 | 1.23ms | 127.0.0.1 | POST /api/v1/tasks</code></li></ul></li><li><p><strong><code>queue</code>:</strong></p><ul><li><strong>What to expect:</strong> Detailed logs about the task queue processor. This includes finding new tasks, task state transitions (e.g., moving from QUEUED to RUNNING), maximum concurrent task checks, and pre/post-processing script execution steps.</li><li><strong>Example Log:</strong> <code>queue no queued tasks found</code> or <code>queue processing task (uuid: ...)</code> or <code>queue triggered preProcessing script (uuid: ...)</code></li></ul></li><li><p><strong><code>ffmpeg</code>:</strong></p><ul><li><strong>What to expect:</strong> Logs specifically from <code>ffmate</code>&#39;s interaction with the <code>ffmpeg</code> binary. This primarily includes the real-time progress parsing from <code>ffmpeg</code>&#39;s stderr. You&#39;ll see lines showing frame counts, FPS, bitrate, time, and speed. This namespace <strong>does not</strong> show the raw <code>ffmpeg</code> stderr itself (that&#39;s part of the main application log if an error occurs), but rather <code>ffmate</code>&#39;s interpretation of it for progress.</li><li><strong>Example Log:</strong> <code>ffmpeg progress: 25.50 {Frame:123 FPS:29.97 Bitrate:1500k Time:4.10 Speed:1.5x} (uuid: ...)</code></li></ul></li><li><p><strong><code>watchfolder</code>:</strong></p><ul><li><strong>What to expect:</strong> Information about the watchfolder processing, such as initialization, directory scanning, file state tracking (growth checks), and new task creation from watched files.</li><li><strong>Example Log:</strong> <code>watchfolder initialized new watchfolder watcher (uuid: ...)</code> or <code>watchfolder created new task for watchfolder (uuid: ...) file: ...</code></li></ul></li><li><p><strong><code>sev:&lt;component&gt;</code> (Internal Framework):</strong></p><ul><li>The <code>sev</code> namespace is for <code>ffmate</code>&#39;s internal framework. You might use these for deeper debugging if you suspect an issue within the core application logic.</li><li><strong><code>sev:webhook</code></strong>: Logs related to firing webhooks (e.g., &quot;fired webhook for event &#39;task:created&#39;&quot;).</li><li><strong><code>sev:metrics</code></strong>: Logs about Prometheus metrics registration.</li><li><strong><code>sev:controller</code></strong>: Logs related to controller registration.</li><li><strong><code>sev:telemetry</code></strong>: Logs about sending telemetry data.</li><li><strong><code>sev:middleware</code></strong>: Logs related to middleware registration or execution.</li></ul></li><li><p><strong><code>websocket:controller</code> / <code>websocket:service</code>:</strong></p><ul><li><strong>What to expect:</strong> Logs related to WebSocket connections, disconnections, and messages being broadcast.</li><li><strong>Example Log:</strong> <code>websocket:controller new connection from 127.0.0.1 (uuid: ...)</code></li></ul></li><li><p><strong><code>prometheus:register</code>:</strong></p><ul><li><strong>What to expect:</strong> Logs specifically detailing the registration of Prometheus metrics.</li><li><strong>Example Log:</strong> <code>prometheus:register registered prometheus gauge &#39;task_created&#39;</code></li></ul></li></ul><h3 id="setting-debug-from-the-api" tabindex="-1">Setting debug from the API <a class="header-anchor" href="#setting-debug-from-the-api" aria-label="Permalink to &quot;Setting debug from the API&quot;">​</a></h3><p><code>ffmate</code> provides API endpoints to change the debug namespaces <em>while the server is running</em>, without needing to restart it:</p><ul><li><strong><code>PATCH /api/v1/debug/namespace/{namespaces}</code></strong><ul><li><strong>Purpose:</strong> Sets the active debug namespaces.</li><li><strong>Example:</strong> <code>curl -X PATCH http://localhost:3000/api/v1/debug/namespace/queue,ffmpeg</code></li></ul></li><li><strong><code>DELETE /api/v1/debug/namespace</code></strong><ul><li><strong>Purpose:</strong> Turns off all debug logging (sets namespaces to empty).</li><li><strong>Example:</strong> <code>curl -X DELETE http://localhost:3000/api/v1/debug/namespace</code></li></ul></li></ul><p>This is extremely useful for enabling targeted debugging on a live system without disrupting its normal operation more than necessary.</p><p>Sure! Here&#39;s the improved version formatted in clean Markdown:</p><h3 id="debug-message-format" tabindex="-1">Debug Message Format <a class="header-anchor" href="#debug-message-format" aria-label="Permalink to &quot;Debug Message Format&quot;">​</a></h3><p>All debug messages follow a consistent structure:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>HH:MM:SS.mmm &lt;NAMESPACE&gt; &lt;MESSAGE&gt;</span></span></code></pre></div><ul><li><strong><code>HH:MM:SS.mmm</code></strong> – Timestamp showing hours, minutes, seconds, and milliseconds</li><li><strong><code>&lt;NAMESPACE&gt;</code></strong> – Identifies the component that generated the message</li><li><strong><code>&lt;MESSAGE&gt;</code></strong> – The actual debug log content</li></ul><p><strong>Example:</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>10:05:15.123 queue processing task (uuid: abc-123-def-456)</span></span></code></pre></div>',22)]))}const m=o(n,[["render",i]]);export{p as __pageData,m as default};
