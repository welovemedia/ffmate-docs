import{_ as i,c as a,o as t,a2 as n}from"./chunks/framework.COcSrLCv.js";const c=JSON.parse('{"title":"Pre and Post-Processing","description":"","frontmatter":{},"headers":[],"relativePath":"docs/pre-post-prcessing.md","filePath":"docs/pre-post-prcessing.md","lastUpdated":1746569539000}'),e={name:"docs/pre-post-prcessing.md"};function l(p,s,h,k,o,r){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="pre-and-post-processing" tabindex="-1">Pre and Post-Processing <a class="header-anchor" href="#pre-and-post-processing" aria-label="Permalink to &quot;Pre and Post-Processing&quot;">​</a></h1><p><code>FFmate</code> allows you to extend the functionality of your transcoding tasks by executing custom scripts <em>before</em> the <code>ffmpeg</code> command starts (pre-processing) and <em>after</em> it successfully completes (post-processing). This powerful feature enables you to automate a wide range of activities, from input validation and file preparation to notifications, archiving, and integration with other systems.</p><p>You can define pre and post-processing steps either directly within a task creation request or as part of a <a href="#presets">Preset</a>. If defined in both, the task-specific definition will take precedence.</p><h3 id="configuration-parameters" tabindex="-1">Configuration Parameters <a class="header-anchor" href="#configuration-parameters" aria-label="Permalink to &quot;Configuration Parameters&quot;">​</a></h3><p>For both pre-processing and post-processing, you can configure the following:</p><ol><li><p><strong><code>scriptPath</code></strong>:</p><ul><li><strong>Purpose</strong>: Defines the command or the full path to the script you want <code>ffmate</code> to execute.</li><li><strong>Wildcards</strong>: This field fully supports <code>ffmate</code>&#39;s <a href="#wildcards">Wildcards</a>. This means you can dynamically pass filenames, dates, UUIDs, and other task-related information as arguments to your script.</li><li><strong>Execution</strong>: <code>ffmate</code> will attempt to execute this string as a command. Ensure your script is executable and its path is correct. The script will run with the same environment and permissions as the <code>ffmate</code> process itself.</li><li><strong>Exit Codes</strong>: <ul><li>A <strong>zero exit code</strong> (0) from your script indicates success.</li><li>A <strong>non-zero exit code</strong> indicates an error. <ul><li>If a <em>pre-processing</em> script exits with a non-zero code, the main <code>ffmpeg</code> task will <strong>not</strong> run, and the entire task will be marked as failed.</li><li>If a <em>post-processing</em> script exits with a non-zero code, the main <code>ffmpeg</code> task has already completed successfully, but the overall <code>ffmate</code> task will be marked as failed due to the post-processing error.</li></ul></li></ul></li><li><em>Example</em>: <code>python3 /opt/ffmate_scripts/prepare_audio.py --input \${INPUT_FILE} --normalize-level -3dBFS</code></li></ul></li><li><p><strong><code>sidecarPath</code></strong>:</p><ul><li><strong>Purpose</strong>: (Optional) Specifies a path where <code>ffmate</code> will write a JSON file containing detailed information about the current task. Your script can then read this &quot;sidecar&quot; file to get context.</li><li><strong>Wildcards</strong>: This field also supports <a href="#wildcards">Wildcards</a>, allowing you to name and place the sidecar file dynamically.</li><li><strong>Content</strong>: The sidecar JSON file contains a snapshot of the <code>ffmate</code> task object at that point in the workflow. <ul><li>For <strong>pre-processing</strong>, this includes the raw and (potentially partially) resolved input/output paths, any metadata you provided with the task, task UUID, name, priority, etc.</li><li>For <strong>post-processing</strong>, this includes all the above, plus the <em>final resolved</em> output path from <code>ffmpeg</code>, and the task&#39;s status will typically be <code>RUNNING</code> (just before it&#39;s marked <code>DONE_SUCCESSFUL</code> if post-processing also succeeds).</li></ul></li><li><em>Example</em>: <code>\${INPUT_FILE_DIR}/\${INPUT_FILE_BASENAME}.task_info.json</code></li></ul></li></ol><h3 id="workflow" tabindex="-1">Workflow <a class="header-anchor" href="#workflow" aria-label="Permalink to &quot;Workflow&quot;">​</a></h3><ol><li><strong>Task Queued:</strong> A new task is created (either directly or via a watchfolder).</li><li><strong>Pre-Processing (if defined):</strong><ul><li><code>ffmate</code> resolves wildcards in <code>preProcessing.sidecarPath</code> (if defined) and writes the task data JSON file.</li><li><code>ffmate</code> resolves wildcards in <code>preProcessing.scriptPath</code>.</li><li><code>ffmate</code> executes the <code>scriptPath</code> command.</li><li>If the script fails (non-zero exit code), the task status is set to <code>DONE_ERROR</code>, and the process stops here. The error from the script is logged.</li></ul></li><li><strong>FFmpeg Processing:</strong><ul><li>If pre-processing was successful (or not defined), <code>ffmate</code> resolves wildcards for the main <code>ffmpeg</code> command, input, and output files.</li><li>The <code>ffmpeg</code> command is executed.</li><li>If <code>ffmpeg</code> fails, the task status is set to <code>DONE_ERROR</code>, and the process stops here. Post-processing will not run.</li></ul></li><li><strong>Post-Processing (if defined):</strong><ul><li>Assuming <code>ffmpeg</code> completed successfully, <code>ffmate</code> resolves wildcards in <code>postProcessing.sidecarPath</code> (if defined) and writes/updates the task data JSON file (now including the final <code>ffmpeg</code> output path).</li><li><code>ffmate</code> resolves wildcards in <code>postProcessing.scriptPath</code>.</li><li><code>ffmate</code> executes the <code>scriptPath</code> command.</li><li>If the script fails (non-zero exit code), the task status is set to <code>DONE_ERROR</code>. The error from the script is logged.</li></ul></li><li><strong>Task Completion:</strong><ul><li>If post-processing was successful (or not defined), the task status is set to <code>DONE_SUCCESSFUL</code>.</li></ul></li></ol><h3 id="practical-examples" tabindex="-1">Practical Examples <a class="header-anchor" href="#practical-examples" aria-label="Permalink to &quot;Practical Examples&quot;">​</a></h3><h4 id="example-1-pre-processing-input-validation-and-metadata-extraction" tabindex="-1">Example 1: Pre-Processing - Input Validation and Metadata Extraction <a class="header-anchor" href="#example-1-pre-processing-input-validation-and-metadata-extraction" aria-label="Permalink to &quot;Example 1: Pre-Processing - Input Validation and Metadata Extraction&quot;">​</a></h4><ul><li><p><strong>Goal</strong>: Before transcoding, ensure the input video is not too short and extract its duration into the task&#39;s metadata for potential use by <code>ffmpeg</code> or post-processing.</p></li><li><p><strong>Preset/Task Configuration:</strong></p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;preProcessing&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;scriptPath&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;python /opt/ffmate_scripts/validate_and_get_duration.py --sidecar \${INPUT_FILE_DIR}/\${INPUT_FILE_BASENAME}.pre_task_info.json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;sidecarPath&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${INPUT_FILE_DIR}/\${INPUT_FILE_BASENAME}.pre_task_info.json&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ... other preset/task details</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><h4 id="example-2-post-processing-upload-to-cloud-storage-and-notify" tabindex="-1">Example 2: Post-Processing - Upload to Cloud Storage and Notify <a class="header-anchor" href="#example-2-post-processing-upload-to-cloud-storage-and-notify" aria-label="Permalink to &quot;Example 2: Post-Processing - Upload to Cloud Storage and Notify&quot;">​</a></h4><ul><li><p><strong>Goal</strong>: After a successful transcode, upload the output file to an S3 bucket and send a Slack notification.</p></li><li><p><strong>Preset/Task Configuration:</strong></p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;postProcessing&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;scriptPath&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/opt/ffmate_scripts/upload_and_notify.sh&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;sidecarPath&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${OUTPUT_FILE_DIR}/\${OUTPUT_FILE_BASENAME}.post_task_info.json&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ... other preset/task details</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong><code>upload_and_notify.sh</code> (Conceptual):</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/bin/bash</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">set</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Exit immediately if a command exits with a non-zero status.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SIDECAR_FILE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Basic argument parsing (robust scripts would use getopts)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;--sidecar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ] &amp;&amp; [ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    SIDECAR_FILE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # If ffmate passes sidecar path as the first arg directly</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    SIDECAR_FILE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fi</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-z</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$SIDECAR_FILE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$SIDECAR_FILE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Error: Sidecar file path not provided or file not found.&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;&amp;2</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    exit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fi</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Read data from sidecar using &#39;jq&#39; (JSON processor)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">OUTPUT_FILE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jq</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;.outputFile.resolved&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$SIDECAR_FILE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">TASK_NAME</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jq</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;.name // &quot;Untitled Task&quot;&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$SIDECAR_FILE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">TASK_UUID</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jq</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;.uuid&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$SIDECAR_FILE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-z</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$OUTPUT_FILE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Error: Could not extract output file from sidecar.&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;&amp;2</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    exit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fi</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">S3_BUCKET</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;s3://my-ffmate-outputs&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SLACK_WEBHOOK_URL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Uploading \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">OUTPUT_FILE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">} to \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">S3_BUCKET</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}...&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">aws</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> s3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">OUTPUT_FILE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">S3_BUCKET</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}/&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$?</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -ne</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Error: S3 upload failed for \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">OUTPUT_FILE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}.&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;&amp;2</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    exit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fi</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Upload successful.&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Send Slack notification</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MESSAGE_TEXT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Task Complete: &#39;\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">TASK_NAME</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&#39; (UUID: \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">TASK_UUID</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}). Output: \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">S3_BUCKET</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}/$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">basename</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">OUTPUT_FILE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;)&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PAYLOAD</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">text</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MESSAGE_TEXT</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -X</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> POST</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -H</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Content-type: application/json&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --data</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PAYLOAD</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SLACK_WEBHOOK_URL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$?</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -ne</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Warning: Slack notification failed, but file was uploaded.&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;&amp;2</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Decide if this should be a hard fail (exit 3) or just a warning</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fi</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Post-processing complete for \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">TASK_UUID</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}.&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Success</span></span></code></pre></div></li></ul>`,13)]))}const E=i(e,[["render",l]]);export{c as __pageData,E as default};
