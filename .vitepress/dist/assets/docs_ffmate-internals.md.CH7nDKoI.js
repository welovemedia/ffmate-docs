import{_ as r,C as n,c as l,o as i,j as t,b as c,a2 as d,a as o,w as s,G as h,a3 as p}from"./chunks/framework.COcSrLCv.js";const v=JSON.parse('{"title":"FFmate Internals","description":"","frontmatter":{},"headers":[],"relativePath":"docs/ffmate-internals.md","filePath":"docs/ffmate-internals.md","lastUpdated":1746569539000}'),u={name:"docs/ffmate-internals.md"};function g(f,e,E,m,k,A){const a=n("Mermaid");return i(),l("div",null,[e[1]||(e[1]=t("h1",{id:"ffmate-internals",tabindex:"-1"},[o("FFmate Internals "),t("a",{class:"header-anchor",href:"#ffmate-internals","aria-label":'Permalink to "FFmate Internals"'},"​")],-1)),e[2]||(e[2]=t("p",null,[o("This section provides a more in-depth look at some of "),t("code",null,"FFmate"),o("'s key internal components and how they interact. Understanding these is key for advanced troubleshooting, fine-tuning configurations, and integrating ffmate into your workflows.")],-1)),e[3]||(e[3]=t("h3",{id:"high-level-component-diagram",tabindex:"-1"},[o("High-Level Component Diagram "),t("a",{class:"header-anchor",href:"#high-level-component-diagram","aria-label":'Permalink to "High-Level Component Diagram"'},"​")],-1)),(i(),c(p,null,{default:s(()=>[h(a,{id:"mermaid-9",class:"mermaid",graph:"graph%20TD%0A%20%20%20%20%25%25%20%E2%94%80%E2%94%80%E2%94%80%20UI%20%26%20API%20%E2%94%80%E2%94%80%E2%94%80%E2%94%80%E2%94%80%E2%94%80%E2%94%80%E2%94%80%E2%94%80%E2%94%80%E2%94%80%E2%94%80%E2%94%80%E2%94%80%E2%94%80%E2%94%80%E2%94%80%E2%94%80%E2%94%80%E2%94%80%E2%94%80%E2%94%80%E2%94%80%E2%94%80%E2%94%80%0A%20%20%20%20WebUI%5B%22Web%20UI%22%5D%3A%3A%3Aui%0A%20%20%20%20REST_API%5B%22REST%20API%22%5D%3A%3A%3Aapi%0A%20%20%20%20WebUI%20--%3E%20REST_API%0A%0A%20%20%20%20%25%25%20%E2%94%80%E2%94%80%E2%94%80%20Services%20(single%20row)%20%E2%94%80%E2%94%80%E2%94%80%E2%94%80%E2%94%80%E2%94%80%E2%94%80%E2%94%80%E2%94%80%E2%94%80%E2%94%80%0A%20%20%20%20subgraph%20Services%20%5B%22Services%22%5D%0A%20%20%20%20%20%20%20%20direction%20LR%0A%20%20%20%20%20%20%20%20TaskSvc%5B%22Task%20Service%22%5D%3A%3A%3Asvc%0A%20%20%20%20%20%20%20%20PresetSvc%5B%22Preset%20Service%22%5D%3A%3A%3Asvc%0A%20%20%20%20%20%20%20%20WatchfolderSvc%5B%22Watchfolder%20Service%22%5D%3A%3A%3Asvc%0A%20%20%20%20%20%20%20%20WebhookSvc%5B%22Webhook%20Service%22%5D%3A%3A%3Asvc%0A%20%20%20%20end%0A%20%20%20%20REST_API%20--%3E%20TaskSvc%0A%20%20%20%20REST_API%20--%3E%20PresetSvc%0A%20%20%20%20REST_API%20--%3E%20WatchfolderSvc%0A%20%20%20%20REST_API%20--%3E%20WebhookSvc%0A%0A%20%20%20%20%25%25%20%E2%94%80%E2%94%80%E2%94%80%20Core%20%26%20DB%20side-by-side%20%E2%94%80%E2%94%80%E2%94%80%E2%94%80%E2%94%80%E2%94%80%E2%94%80%E2%94%80%E2%94%80%E2%94%80%E2%94%80%0A%20%20%20%20subgraph%20Core%20%5B%22Core%22%5D%0A%20%20%20%20%20%20%20%20direction%20LR%0A%20%20%20%20%20%20%20%20FFMate%5B%22FFmate%22%5D%3A%3A%3Acore%0A%20%20%20%20%20%20%20%20DB%5B(SQLite%20DB)%5D%3A%3A%3Adb%0A%20%20%20%20end%0A%20%20%20%20TaskSvc%20--%3E%20FFMate%0A%20%20%20%20PresetSvc%20--%3E%20FFMate%0A%20%20%20%20WatchfolderSvc%20--%3E%20FFMate%0A%20%20%20%20WebhookSvc%20--%3E%20FFMate%0A%20%20%20%20FFMate%20--%3E%20DB%0A%0A%20%20%20%20%25%25%20%E2%94%80%E2%94%80%E2%94%80%20ffmpeg%20binary%20in%20dashed%20box%20%E2%94%80%E2%94%80%E2%94%80%E2%94%80%E2%94%80%0A%20%20%20%20subgraph%20FFmpegBlock%20%5B%22%20%22%5D%0A%20%20%20%20%20%20%20%20direction%20LR%0A%20%20%20%20%20%20%20%20FFmpeg%5B%22ffmpeg%20Binary%22%5D%3A%3A%3Affbin%0A%20%20%20%20end%0A%20%20%20%20style%20FFmpegBlock%20stroke-dasharray%3A5%205%2Cstroke%3A%23555%2Cfill%3Anone%0A%20%20%20%20FFMate%20--%3E%20FFmpeg%0A%0A%20%20%20%20%25%25%20%E2%94%80%E2%94%80%E2%94%80%20Stronger%20colour%20palette%20%2B%20black%20text%20%E2%94%80%E2%94%80%E2%94%80%E2%94%80%E2%94%80%E2%94%80%E2%94%80%E2%94%80%E2%94%80%E2%94%80%0A%20%20%20%20classDef%20ui%20%20%20%20%20fill%3A%2399d6ff%2Cstroke%3A%232060a0%2Cstroke-width%3A1.2px%2Ccolor%3A%23000000%3B%0A%20%20%20%20classDef%20api%20%20%20%20fill%3A%23b3e0ff%2Cstroke%3A%232060a0%2Cstroke-width%3A1.2px%2Ccolor%3A%23000000%3B%0A%20%20%20%20classDef%20svc%20%20%20%20fill%3A%23bdb4ff%2Cstroke%3A%234b44a0%2Cstroke-width%3A1.2px%2Ccolor%3A%23000000%3B%0A%20%20%20%20classDef%20core%20%20%20fill%3A%2399ff99%2Cstroke%3A%232d7a2d%2Cstroke-width%3A1.2px%2Ccolor%3A%23000000%3B%0A%20%20%20%20classDef%20db%20%20%20%20%20fill%3A%23ffcc80%2Cstroke%3A%23b36b00%2Cstroke-width%3A1.2px%2Ccolor%3A%23000000%3B%0A%20%20%20%20classDef%20ffbin%20%20fill%3A%23ff99cc%2Cstroke%3A%23b3366b%2Cstroke-width%3A1.2px%2Ccolor%3A%23000000%3B%0A"})]),fallback:s(()=>e[0]||(e[0]=[o(" Loading... ")])),_:1})),e[4]||(e[4]=d(`<h3 id="_1-rest-api" tabindex="-1">1. REST API <a class="header-anchor" href="#_1-rest-api" aria-label="Permalink to &quot;1. REST API&quot;">​</a></h3><p>The REST API, is the primary way external clients (including the <code>FFmate</code> Web UI, scripts, or other services) interact with and control <code>FFmate</code>.</p><ul><li><strong>Functionality:</strong> Provides endpoints for CRUD (Create, Read, Update, Delete) operations on: <ul><li>Tasks (e.g., create single/batch, list, get status, cancel, restart, delete)</li><li>Presets</li><li>Watchfolders</li><li>Webhooks</li></ul></li></ul><h3 id="_2-sqlite-database" tabindex="-1">2. SQLite Database <a class="header-anchor" href="#_2-sqlite-database" aria-label="Permalink to &quot;2. SQLite Database&quot;">​</a></h3><p><code>FFmate</code> uses SQLite as its backend database to store all persistent data.</p><ul><li><strong>Data Stored:</strong><ul><li>Tasks: All details about transcoding jobs, including their status, progress, input/output files, commands, priority, pre/post-processing info, timestamps, and any errors.</li><li>Presets: Definitions for reusable transcoding templates.</li><li>Webhooks: Configurations for URLs to be notified on specific events.</li><li>Watchfolders: Settings for monitored directories, including paths, intervals, associated presets, and filters.</li></ul></li></ul><h3 id="_3-web-ui" tabindex="-1">3. Web UI <a class="header-anchor" href="#_3-web-ui" aria-label="Permalink to &quot;3. Web UI&quot;">​</a></h3><p><code>FFmate</code> includes a modern web-based user interface for managing and monitoring tasks, presets, watchfolders, and webhooks.</p><ul><li><strong>Access:</strong> When <code>ffmate</code> server starts, the web ui is served from the <code>/ui</code> path (e.g., <code>http://localhost:3000/ui</code>)</li><li><strong>Backend Communication:</strong> The Web UI communicates with the <code>ffmate</code> service via: <ul><li><code>REST API</code>: For actions like creating tasks, fetching lists, deleting presets, etc.</li><li><code>WebSockets</code>: For receiving real-time updates like task progress, new log messages, and status changes.</li></ul></li></ul><h3 id="_5-webhooks" tabindex="-1">5. Webhooks <a class="header-anchor" href="#_5-webhooks" aria-label="Permalink to &quot;5. Webhooks&quot;">​</a></h3><p>Webhooks allow <code>FFmate</code> to automatically notify external systems about specific events by sending HTTP POST requests to configured URLs.</p><ul><li><strong>Configuration:</strong><ul><li>Users define webhooks via the <code>REST API</code> (<code>/api/v1/webhooks</code>).</li><li>Each webhook configuration includes: <ul><li><strong>Event (<code>event</code>):</strong> The specific <code>ffmate</code> event that will trigger this webhook (e.g., <code>task.created</code>, <code>task.updated</code>, <code>batch.finished</code>, <code>preset.deleted</code>).</li><li><strong>URL (<code>url</code>):</strong> The external HTTP(S) endpoint to which <code>ffmate</code> will send the notification.</li></ul></li></ul></li><li><strong>Triggering:</strong> When a configured event occurs within <code>FFmate</code>: <ul><li><code>FFmate</code> automatically sends an HTTP POST request.</li><li>This request is sent to the <code>URL</code> defined in the webhook configuration.</li><li>The body of the request contains a JSON payload detailing the <code>event</code> that occurred and relevant <code>data</code> associated with it.</li></ul></li><li><strong>Payload Structure:</strong><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;event&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;event.name.here&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;data&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><h3 id="_6-watchfolder" tabindex="-1">6. Watchfolder <a class="header-anchor" href="#_6-watchfolder" aria-label="Permalink to &quot;6. Watchfolder&quot;">​</a></h3><p>The Watchfolder feature allows <code>FFmate</code> to monitor directories for new files and automatically create transcoding tasks for them based on a specified preset.</p><ul><li><strong>Configuration:</strong> Watchfolders are configured via the <code>REST API</code> or <code>Web UI</code>. Each configuration includes: <ul><li><strong>Path (<code>path</code>):</strong> The directory to monitor.</li><li><strong>Preset (<code>preset</code>):</strong> The name of the preset to apply to newly detected files.</li><li><strong>Interval (<code>interval</code>):</strong> How often the directory is scanned (e.g., <code>10s</code>).</li><li><strong>Filters (<code>filters</code>):</strong> (Optional) Rules to include or exclude specific files (e.g., by extension).</li><li><strong>Growth Checks (<code>growthChecks</code>):</strong> (Optional) How many scan intervals a file must remain stable in size before being processed.</li></ul></li><li><strong>Monitoring Process:</strong><ul><li><code>FFmate</code> starts monitoring configured directories upon startup or configuration changes.</li><li>Directories are scanned periodically based on the configured <code>interval</code>.</li><li>New files are detected.</li><li>Files are checked for stability (size consistency) based on <code>growthChecks</code> to ensure they are fully written.</li><li>Configured <code>filters</code> are applied to the relevant files.</li><li>A new task is automatically created for each stable, filtered file.</li><li>The <code>preset</code> is applied to the new task.</li><li><code>FFmate</code> keeps track of processed files to avoid creating duplicate tasks.</li></ul></li><li><strong>Dynamic Updates:</strong> Changes to Watchfolder configurations (creation, updates, deletion) via the API or UI are dynamically loaded and applied without needing a <code>FFmate</code> restart.</li></ul><h3 id="_7-task-queue-and-ffmpeg-execution" tabindex="-1">7. Task Queue and <code>ffmpeg</code> Execution <a class="header-anchor" href="#_7-task-queue-and-ffmpeg-execution" aria-label="Permalink to &quot;7. Task Queue and \`ffmpeg\` Execution&quot;">​</a></h3><p>This is the core process where your transcoding jobs are managed and processed from submission to completion.</p><ul><li><strong>Queueing:</strong><ul><li>New tasks (submitted via <code>API</code>, <code>Web UI</code>, or <code>Watchfolders</code>) are added to a queue.</li><li>Tasks are processed based on their <strong>Priority</strong> (higher priority first) and then by creation time.</li><li>Initially, tasks are in the <code>QUEUED</code> status.</li></ul></li><li><strong>Concurrency Control:</strong><ul><li><code>FFmate</code> limits the number of tasks running simultaneously.</li><li>This limit is controlled by the <code>--max-concurrent-tasks</code> server setting.</li><li>When a slot becomes available, the next task from the queue starts processing.</li></ul></li><li><strong>Task Lifecycle:</strong> Once a task is selected from the queue: <ul><li>Its status is updated to <code>RUNNING</code>.</li><li><strong>Pre-processing:</strong> If a pre-processing script is defined, it is executed before <code>ffmpeg</code>.</li><li><strong><code>ffmpeg</code> Execution:</strong> The primary transcoding command (<code>ffmpeg</code>) is executed.</li><li><strong>Progress Monitoring:</strong> <code>FFmate</code> monitors <code>ffmpeg</code>&#39;s output to track progress (e.g., percentage complete, time remaining). This progress is updated in the database and pushed via <code>WebSockets</code>.</li><li><strong>Post-processing:</strong> If a post-processing script is defined and <code>ffmpeg</code> completed successfully, the post-processing script is executed.</li><li><strong>Completion:</strong> The task status is updated to reflect the outcome: <code>DONE_SUCCESSFUL</code>, <code>DONE_ERROR</code>, or <code>DONE_CANCELED</code>. Error details are captured if applicable.</li></ul></li><li><strong>Notifications:</strong> Throughout a task&#39;s lifecycle, status changes and progress updates are broadcast via <code>WebSockets</code> (used by the <code>Web UI</code>) and can trigger configured <code>Webhooks</code>.</li></ul><p>These descriptions and diagrams should give users a clearer picture of the main data flows and component interactions within <code>ffmate</code>.</p>`,19))])}const F=r(u,[["render",g]]);export{v as __pageData,F as default};
