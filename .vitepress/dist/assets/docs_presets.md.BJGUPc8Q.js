import{_ as s,c as i,o as t,a2 as a}from"./chunks/framework.COcSrLCv.js";const u=JSON.parse('{"title":"Presets","description":"","frontmatter":{},"headers":[],"relativePath":"docs/presets.md","filePath":"docs/presets.md","lastUpdated":1746569539000}'),o={name:"docs/presets.md"};function n(l,e,r,p,h,c){return t(),i("div",null,e[0]||(e[0]=[a(`<h1 id="presets" tabindex="-1">Presets <a class="header-anchor" href="#presets" aria-label="Permalink to &quot;Presets&quot;">​</a></h1><p>Presets in <code>ffmate</code> are powerful templates that allow you to pre-configure common <code>ffmpeg</code> operations. They help you save time, ensure consistency, and simplify the process of creating new transcoding tasks.</p><p>Think of a preset as a named, reusable recipe for a specific type of video or audio conversion.</p><h3 id="what-can-you-define-in-a-preset" tabindex="-1">What Can You Define in a Preset? <a class="header-anchor" href="#what-can-you-define-in-a-preset" aria-label="Permalink to &quot;What Can You Define in a Preset?&quot;">​</a></h3><p>When you create a preset, you can specify several key parameters that will be automatically applied to tasks created using that preset:</p><ol><li><p><strong>Name (<code>name</code>):</strong></p><ul><li>A unique, human-readable name for your preset (e.g., &quot;Convert to MP4 1080p&quot;, &quot;Extract Audio as MP3&quot;). This helps you easily identify and select it.</li></ul></li><li><p><strong>Description (<code>description</code>):</strong></p><ul><li>(Optional) A more detailed explanation of what the preset does or any specific notes about its usage.</li></ul></li><li><p><strong>FFmpeg Command (<code>command</code>):</strong></p><ul><li>The core <code>ffmpeg</code> command string you want to execute. This is where you define codecs, bitrates, resolutions, filters, etc.</li><li>You can use <code>ffmate</code>&#39;s <a href="#wildcards">Wildcards</a> (like <code>\${INPUT_FILE}</code> and <code>\${OUTPUT_FILE}</code>) within the command. <code>ffmate</code> will replace these with the actual file paths when a task is processed.</li><li><strong>Important:</strong> When a task uses a preset, the <code>command</code> from the preset will <em>always</em> be used, overriding any command specified directly in the task creation request.</li></ul></li><li><p><strong>Output File Pattern (<code>outputFile</code>):</strong></p><ul><li>A pattern for generating the output filename. This also supports <a href="#wildcards">Wildcards</a> to create dynamic and organized output filenames (e.g., <code>\${INPUT_FILE_BASENAME}_1080p.mp4</code>).</li><li>If you specify an <code>outputFile</code> directly when creating a task, that will take precedence over the preset&#39;s <code>outputFile</code>. If you don&#39;t, the preset&#39;s pattern will be used.</li></ul></li><li><p><strong>Priority (<code>priority</code>):</strong></p><ul><li>A numerical value indicating the priority of tasks created with this preset in the processing queue.</li><li><strong>Higher numbers mean higher priority.</strong> For example, a task with priority <code>100</code> will be processed before a task with priority <code>10</code>.</li><li>If multiple tasks have the same priority, they are generally processed in the order they were created (First-In, First-Out for that priority level).</li><li>If you specify a <code>priority</code> directly when creating a task, that will take precedence. Otherwise, the preset&#39;s priority is used. If neither is set, a default priority (likely 0) will be used.</li></ul></li><li><p><strong>Pre-Processing (<code>preProcessing</code>):</strong></p><ul><li>(Optional) Configure a script to run <em>before</em> the main <code>ffmpeg</code> command.</li><li><strong><code>scriptPath</code></strong>: The command or path to the script to execute. Wildcards can be used here. <ul><li><em>Example</em>: <code>python /opt/scripts/validate_input.py --input \${INPUT_FILE} --metadata_out \${INPUT_FILE_BASENAME}.json</code></li></ul></li><li><strong><code>sidecarPath</code></strong>: (Optional) Path where <code>ffmate</code> will write a JSON file containing the task&#39;s details (metadata, input/output paths) <em>before</em> running the pre-processing script. Your script can then read this file. Wildcards can be used here. <ul><li><em>Example</em>: <code>\${INPUT_FILE_DIR}/\${INPUT_FILE_BASENAME}_ffmate_task.json</code></li><li><em>Use Case</em>: Your <code>validate_input.py</code> script could read this sidecar file to get the original input filename, user-provided metadata, and then perform checks like ensuring the file exists or meets certain duration criteria. If validation fails, the script can exit with an error code, which will cause <code>ffmate</code> to mark the pre-processing step (and thus the task) as failed.</li></ul></li><li>If you define <code>preProcessing</code> directly in a task creation request, it will be used. Otherwise, the preset&#39;s <code>preProcessing</code> configuration (if any) will be applied.</li></ul></li><li><p><strong>Post-Processing (<code>postProcessing</code>):</strong></p><ul><li>(Optional) Configure a script to run <em>after</em> the <code>ffmpeg</code> command completes successfully.</li><li><strong><code>scriptPath</code></strong>: The command or path to the script to execute. Wildcards can be used here. <ul><li><em>Example</em>: <code>bash /opt/scripts/archive_and_notify.sh --source \${OUTPUT_FILE} --original \${INPUT_FILE}</code></li></ul></li><li><strong><code>sidecarPath</code></strong>: (Optional) Path where <code>ffmate</code> will write a JSON file containing the task&#39;s details (including the final output path from <code>ffmpeg</code>) <em>before</em> running the post-processing script. Wildcards can be used here. <ul><li><em>Example</em>: <code>\${OUTPUT_FILE_DIR}/\${OUTPUT_FILE_BASENAME}_ffmate_task_complete.json</code></li><li><em>Use Case</em>: Your <code>archive_and_notify.sh</code> script could read the sidecar to get the final output filename. It might then move <code>\${OUTPUT_FILE}</code> to a long-term archive, send an email notification with the file details, and optionally delete <code>\${INPUT_FILE}</code> if it&#39;s no longer needed.</li></ul></li><li>If you define <code>postProcessing</code> directly in a task creation request, it will be used. Otherwise, the preset&#39;s <code>postProcessing</code> configuration (if any) will be applied.</li></ul></li></ol><h3 id="how-to-manage-presets" tabindex="-1">How to Manage Presets <a class="header-anchor" href="#how-to-manage-presets" aria-label="Permalink to &quot;How to Manage Presets&quot;">​</a></h3><p>You can manage presets through <code>ffmate</code>&#39;s:</p><ul><li><strong>REST API:</strong><ul><li><code>POST /api/v1/presets</code>: Create a new preset.</li><li><code>GET /api/v1/presets</code>: List all existing presets.</li><li><code>DELETE /api/v1/presets/{uuid}</code>: Delete a preset by its unique ID.</li></ul></li><li><strong>Web UI:</strong> The <code>ffmate</code> web interface provides a user-friendly way to create, view, and delete presets.</li></ul><p><strong>Example: Creating a Preset via API with Contextualized Post-Processing</strong></p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// POST /api/v1/presets</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ProRes HQ for Archive&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;description&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Converts input to ProRes HQ and moves it to the archive.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;command&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ffmpeg -i \${INPUT_FILE} -c:v prores_ks -profile:v 3 -vendor apl0 -bits_per_mb 8000 -pix_fmt yuv422p10le -c:a pcm_s16le \${OUTPUT_FILE}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;outputFile&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${INPUT_FILE_BASENAME}_prores_hq.mov&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;priority&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;postProcessing&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;scriptPath&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/usr/local/bin/move_to_archive.sh --file \${OUTPUT_FILE} --project-id some_project_id_from_metadata&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;sidecarPath&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${OUTPUT_FILE_DIR}/\${OUTPUT_FILE_BASENAME}.json&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><em>(In this example, <code>move_to_archive.sh</code> would be a custom script. The <code>project-id</code> could be something passed in the task&#39;s <code>metadata</code> field and then potentially extracted from the sidecar JSON by the script, though the example script path directly includes a placeholder for simplicity here. A more robust script would parse the sidecar for such dynamic values.)</em></p><h3 id="how-to-use-presets-when-creating-tasks" tabindex="-1">How to Use Presets When Creating Tasks <a class="header-anchor" href="#how-to-use-presets-when-creating-tasks" aria-label="Permalink to &quot;How to Use Presets When Creating Tasks&quot;">​</a></h3><p>When you create a new task, you can simply reference the <code>uuid</code> of an existing preset.</p><p><strong>Example: Creating a Task using a Preset via API</strong></p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// POST /api/v1/tasks</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Archive Raw Footage&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;inputFile&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/path/to/raw_footage_01.mxf&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;preset&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;uuid-of-ProRes-HQ-for-Archive-preset&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Replace with actual preset UUID</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;metadata&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;project-id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;project_alpha_123&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;shot_number&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;005&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>ffmate</code> will then automatically:</p><ol><li>Use the <code>command</code> from the &quot;ProRes HQ for Archive&quot; preset.</li><li>Generate the output path using the preset&#39;s <code>outputFile</code> pattern.</li><li>Apply the preset&#39;s <code>priority</code> (50).</li><li>After successful <code>ffmpeg</code> processing, it will create the sidecar file (e.g., <code>/path/to/raw_footage_01_prores_hq.json</code> containing task details) and then execute the <code>postProcessing</code> script (<code>/usr/local/bin/move_to_archive.sh ...</code>).</li></ol>`,18)]))}const k=s(o,[["render",n]]);export{u as __pageData,k as default};
